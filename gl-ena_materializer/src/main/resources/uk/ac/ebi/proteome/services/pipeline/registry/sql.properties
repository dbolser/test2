# procedure definitions
APPENDERROR=CREATE OR REPLACE PROCEDURE \
APPENDERROR(ird IN NUMBER, msg IN CLOB,  errp OUT CLOB) IS \
BEGIN SELECT error INTO errp FROM JOBS WHERE id=ird FOR UPDATE; \
IF errp='''' OR errp IS NULL THEN UPDATE jobs SET error=msg, hasError=1 WHERE id=ird; \
ELSE IF msg IS NOT NULL THEN DBMS_LOB.APPEND(errp,msg); END IF; END IF; COMMIT; END;

APPENDOUTPUT=CREATE OR REPLACE PROCEDURE \
APPENDOUTPUT(ird IN NUMBER, msg IN CLOB,  outp OUT CLOB) IS \
BEGIN SELECT output INTO outp FROM JOBS WHERE id=ird FOR UPDATE; \
IF outp='''' OR outp IS NULL THEN UPDATE jobs SET output=msg WHERE id=ird; \
ELSE IF msg IS NOT NULL THEN DBMS_LOB.APPEND(outp,msg); END IF; END IF; COMMIT; END;

# statements for data updating
CLEAR_JOBS=DELETE FROM JOBS

#createJob(String activity, String subject,	int parentId, int type, Object input, Map parameters)
CREATE_JOB=INSERT INTO JOBS(id,activity,subject,parentid,type,owner,status) VALUES(?,?,?,?,?,?,1)
CREATE_JOB_INPUT=INSERT INTO JOBS(id,activity,subject,parentid,type,owner,status,input) VALUES(?,?,?,?,?,?,1,?)
CREATE_JOB_PARAMS=INSERT INTO JOBS(id,activity,subject,parentid,type,owner,status,parameters) VALUES(?,?,?,?,?,?,1,?)
CREATE_JOB_INPUT_PARAMS=INSERT INTO JOBS(id,activity,subject,parentid,type,owner,status,input,parameters) VALUES(?,?,?,?,?,?,1,?,?)

# checkJobGroup(PipelineJob activity)
CHECK_CHILD_STATUS=SELECT id,status,hasNewData,hasError FROM JOBS WHERE parentid=?

# finding jobs

# getJob(int id)
FIND_JOB=SELECT id,activity,subject,parentid, type FROM JOBS WHERE id=?

#getJobChildren(PipelineJob job)
FIND_JOBCHILD=SELECT id,activity,subject,parentid, type FROM JOBS WHERE parentid=?

#hasActivity(String activity, boolean existsOnly)
FIND_ACTIVITIES_PENDING=SELECT id,activity,subject FROM JOBS \
  WHERE type=1 AND activity=? AND status<?

# findJobs(int status, String activity)
FIND_JOBS_STATUS_ACTIVITY=SELECT id,activity,subject,parentid FROM JOBS \
  WHERE TYPE=0 AND status=? AND activity=?

#findJobs(int status, String activity, String dataSubject)
FIND_JOBS_STATUS_ACTIVITY_SUBJECT=SELECT id,activity,subject,parentid FROM JOBS \
  WHERE TYPE=0 AND status=? AND activity=? AND subject=?

#findJobs(String activity, String dataSubject)
FIND_JOBS_ACTIVITY_SUBJECT=SELECT id,activity,subject,parentid FROM JOBS \
		WHERE TYPE=0 AND activity=? AND subject=?

#findJobs(int status)
FIND_JOBS_STATUS=SELECT id,activity,subject,parentid FROM JOBS \
WHERE TYPE=0 AND status=?

# jobsRunning()
COUNT_JOBS_STATUS=SELECT COUNT(*) FROM JOBS WHERE type=0 AND status<?

# jobsRunning(activity)
COUNT_JOBS_ACTIVITY_STATUS=SELECT COUNT(*) FROM JOBS WHERE type=0 AND activity=? AND status<?

# jobsRunning()
COUNT_JOBS_ACTIVITY_SUBJECT_STATUS=SELECT COUNT(*) FROM JOBS WHERE type=0 AND activity=? AND subject=? AND status<?

#FIND_JOBS_STATUSES=SELECT id FROM JOBS WHERE type=0 AND status<?

# getJobList(String filters)
FIND_JOBS_STATUS_RANGE=SELECT id,activity,subject,parentid FROM JOBS \
WHERE status>=? AND status<=?

# getJobList(String filters)
FIND_JOBS_SUBJECT=SELECT id,activity,subject,parentid,type FROM JOBS \
WHERE subject=?

# getJobList(String filters)
FIND_JOBS_SUBJECT_STATUSES=SELECT id,activity,subject,parentid,type FROM JOBS \
WHERE subject=? AND status<?

# getJobList(String filters)
FIND_JOBS_STATUSES_ACTIVITY=SELECT id FROM JOBS \
WHERE type=0 AND status<? AND activity=?

#FIND_JOBS_STATUSES_ACTIVITY_SUBJECT_SQL=SELECT id FROM JOBS \
#WHERE type=0 AND status<? AND activity=? AND subject=?

#getJobGroups(String activity, int status)
FIND_GROUPS_ACTIVITY_STATUS=SELECT id,activity,subject FROM JOBS \
WHERE type=1 AND activity=? AND status=?

# getJobGroup(String activity, String subject)
FIND_GROUPS_SUBJECT_ACTIVITY=SELECT id,activity,subject FROM JOBS \
WHERE type=1 AND activity=? AND subject=?

# getJobGroups(String activity) hasActivity(String activity, boolean existsOnly)
FIND_GROUPS_ACTIVITY=SELECT id,activity,subject FROM JOBS \
WHERE type=1 AND activity=?

# getController(String activity)
FIND_CONTROLLER_ACTIVITY=SELECT id,activity FROM JOBS \
WHERE type=2 AND activity=?

# getJobGroups() hasActivity()
FIND_ALL_GROUPS=SELECT id,activity,subject FROM JOBS WHERE type=1

#getJobList()
FIND_ALL=SELECT id,activity,subject,parentid,type FROM JOBS

## reporting
GET_JOBSTATES=SELECT subject, hasError, hasNewData, status FROM jobs \
WHERE owner=?
GET_JOBSTATESALL=SELECT subject, hasError, hasNewData, status FROM jobs

## job getters

#getInput(int id)
GET_INPUT=SELECT input FROM jobs WHERE id=?

#getJobStatusN(int id)
GET_STATUS=SELECT status FROM jobs WHERE id=?

#getParameters(int id)
GET_PARAMETERS=SELECT parameters FROM jobs WHERE id=?

#hasError(int id)
GET_HASERROR=SELECT hasError FROM jobs WHERE id=?

#hasNewData(int id)
GET_HASNEWDATA=SELECT hasNewData FROM jobs WHERE id=?

#readTime(int id, String col)
GET_ENDED=SELECT ended FROM jobs WHERE id=?

#readString(int id, String col)
GET_ERROR=SELECT error FROM jobs WHERE id=?

#readString(int id, String col)
GET_OUTPUT=SELECT output FROM jobs WHERE id=?

# readJobResult(int id)
GET_RESULT=SELECT result FROM jobs WHERE id=?

#readTime(int id, String col)
GET_STARTED=SELECT started FROM jobs WHERE id=?

## job setters

#appendString(int id, String s, String col)
APPEND_ERROR=DECLARE errp CLOB; BEGIN APPENDERROR(?, ?, errp); END;

#appendString(int id, String s, String col)
APPEND_OUTPUT=DECLARE outp CLOB; BEGIN APPENDOUTPUT(?, ?, outp); END;

# setTime(int id, String col, Date date)
SET_STARTED=UPDATE jobs SET started=? WHERE id=?

# writeJobResult(int id, Object output)
SET_RESULT=UPDATE jobs SET result=? WHERE id=?

# setTime(int id, String col, Date date)
SET_ENDED=UPDATE jobs SET ended=? WHERE id=?

# setInput(int id, Object input)
SET_INPUT=UPDATE jobs SET input=? WHERE id=?

# setJobStatus(int id, int status)
SET_STATUS=UPDATE jobs SET status=? WHERE id=?

# setJobHasError(int id, boolean err)
SET_HASERROR=UPDATE jobs SET hasError=? WHERE id=?

# setJobHasNewData(int id, boolean n)
SET_HASNEWDATA=UPDATE jobs SET hasNewData=? WHERE id=?

# setParameters(int id, Map<String, Object> input)
SET_PARAMETERS=UPDATE jobs SET parameters=? WHERE id=?

## process owners

# registerUpdateProcessOwner(UpdateProcessOwner pOwner)
CREATE_UPDATE_PROCESS_OWNER=INSERT INTO UPDATE_PROCESS_OWNER VALUES(?,?,?,?)

# registerProcessOwner(ProcessOwner pOwner)
CREATE_PROCESS_OWNER=INSERT INTO PROCESS_OWNER(id,name,description,contact) VALUES(?,?,?,?)

# deleteUpdateProcessOwner(String name)
DELETE_UPDATE_PROCESS_OWNER=DELETE FROM UPDATE_PROCESS_OWNER WHERE NAME=?

# deleteProcessOwner(String name)
DELETE_PROCESS_OWNER=DELETE FROM PROCESS_OWNER WHERE NAME=?

# getProcessOwners()
GET_PROCESS_OWNERS=SELECT ID,NAME,DESCRIPTION,CONTACT FROM PROCESS_OWNER

# getUpdateProcessOwners()
GET_UPDATE_PROCESS_OWNERS=SELECT u.ID, u.NAME, p.NAME, u.DESCRIPTION FROM UPDATE_PROCESS_OWNER u \
  LEFT JOIN PROCESS_OWNER p ON u.PARENTID=p.ID

#updateProcessOwner(ProcessOwner pOwner)
UPDATE_PROCESS_OWNER=UPDATE PROCESS_OWNER SET DESCRIPTION=?,CONTACT=? WHERE ID=?

#updateUpdateProcessOwner(UpdateProcessOwner pOwner)
UPDATE_UPDATE_PROCESS_OWNER=UPDATE UPDATE_PROCESS_OWNER SET DESCRIPTION=? WHERE ID=?

## status CV tables

# DatabaseJobRegistry
INSERT_JOB_STATUS=INSERT INTO JOB_STATUS VALUES(?,?)

# DatabaseJobRegistry
INSERT_PROCESS_STATUS=INSERT INTO PROCESS_STATUS VALUES(?,?)

## processes

# createNewProcess()
CREATE_PROCESS=INSERT INTO PROCESS(id,status,started,ownerid) VALUES(?,?,?,?)

# createNewUpdateProcess()
CREATE_UPDATE_PROCESS=INSERT INTO UPDATE_PROCESS(id,status,started,ownerid) VALUES(?,?,?,?)

# getCurrentUpdateProcessInfo()
GET_CURR_UPDATE_PROCESS_ID=SELECT MAX(p.id) FROM UPDATE_PROCESS p \
JOIN UPDATE_PROCESS_OWNER o ON o.id=p.ownerid WHERE o.name=?

#getCurrentProcessInfo()
GET_CURR_PROCESS_ID=SELECT MAX(p.id) FROM PROCESS p \
JOIN PROCESS_OWNER o ON o.id=p.ownerid WHERE o.name=?

#getUpdateProcessInfo(int id)
GET_ALL_UPDATE_PROCESS_INFO=SELECT p.id, o.name, po.name, p.run, p.started, p.ended, p.status \
  FROM update_process p \
  LEFT JOIN update_process_owner o ON p.ownerid=o.id \
  LEFT JOIN process_owner po ON p.parentid=po.id

#getProcessList()
GET_ALL_PROCESS_INFO=SELECT p.id, o.name, p.run,  p.started, p.ended, p.status \
  FROM process p \
  LEFT JOIN process_owner o ON p.ownerid=o.id

#getUpdateProcessInfo(int id)
GET_UPDATE_PROCESS_INFO=SELECT p.id, o.name, po.name, p.run,  p.started, p.ended, p.status \
  FROM update_process p \
  LEFT JOIN update_process_owner o ON p.ownerid=o.id \
  LEFT JOIN process_owner po ON o.parentid=po.id \
  WHERE p.id=?

#getProcessInfo(int id)
GET_PROCESS_INFO=SELECT p.id, o.name, p.run, p.started, p.ended, p.status \
  FROM process p \
  LEFT JOIN process_owner o ON p.ownerid=o.id \
  WHERE p.id=?

#setProcessStatus(int id, ProcessStatus status)
SET_PROCESS_STARTED=UPDATE process SET started=? WHERE id=?
SET_PROCESS_ENDED=UPDATE process SET ended=? WHERE id=?
SET_PROCESS_STATUS=UPDATE process SET status=? WHERE id=?
INCREMENT_PROCESS_RUN=update process set run=\
(select decode(maxRunId, null,1, maxRunId+1) from \
(select max(run) as maxRunId from process p JOIN process_owner o ON p.ownerid=o.id)) where id=?

# setUpdateProcessStatus(int id, ProcessStatus status)
SET_UPDATE_PROCESS_STARTED=UPDATE update_process SET started=? WHERE id=?
SET_UPDATE_PROCESS_ENDED=UPDATE update_process SET ended=? WHERE id=?
SET_UPDATE_PROCESS_STATUS=UPDATE update_process SET status=? WHERE id=?
INCREMENT_UPDATE_PROCESS_RUN=update update_process set run=\
(select decode(maxRunId, null,1, maxRunId+1) from \
(select max(p.run) as maxRunId from update_process p JOIN update_process_owner o ON p.ownerid=o.id)) where id=?
