#####################################################################

selectCvTable=SELECT id FROM CV_TABLE WHERE name = ?

selectCvSection=SELECT cvs.id FROM CV_SECTION cvs, CV_TABLE t \
                WHERE t.name = ? \
	              AND cvs.table_id = t.id \
	              AND cvs.name = ?

selectCvSectionDataSource=SELECT cvs.id \
	from CV_SECTION cvs, CV_TABLE t \
	where t.NAME =? \
	and t.id = cvs.table_id

addCvSection_CALL=BEGIN \
		INSERT INTO CV_SECTION (id, table_id, NAME, skip_shrinkage_check) \
		VALUES (CV_SECTION_SEQ.NEXTVAL, (SELECT id from CV_TABLE WHERE name = ? ), ?, 0)  \
	RETURNING id into ?; END;

addCvTable_CALL=BEGIN \
		INSERT INTO CV_TABLE (id, NAME, skip_shrinkage_check) \
		VALUES (CV_TABLE_SEQ.NEXTVAL, ?, 0)  \
	RETURNING id into ?; END;

SKIP_SHRINKAGE_CHECK_DATASOURCE=SELECT skip_shrinkage_check from CV_TABLE WHERE name = ?
SKIP_SHRINKAGE_CHECK_SECTION=SELECT skip_shrinkage_check from CV_SECTION WHERE id = ?

CLEAR_SHRINKAGE_CHECK_DATASOURCE=UPDATE CV_TABLE \
	SET skip_shrinkage_check = ? \
	WHERE name = ?

CLEAR_SHRINKAGE_CHECK_SECTION=UPDATE CV_SECTION sec \
	SET sec.skip_shrinkage_check = ? \
	WHERE sec.table_id IN (SELECT id FROM CV_TABLE WHERE name = ?)

#############################################################

insertSectionArchive=INSERT INTO SECTION_ARCHIVE (id, section_id, external_version, created, rowcount, version_id, data_checksum, data_version) \
		VALUES (SECTION_ARCHIVE_SEQ.NEXTVAL, ?, ?, ?, ?, ?, ?, ?)

secSelect=SELECT cvs.id, \
                 cvt.name, \
                 cvs.name, \
                 sa.external_version, \
                 sa.id, \
                 sa.rowcount, \
                 sa.created, \
                 sa.deleted, \
                 sa.version_id, \
                 sa.data_checksum, \
                 sa.data_version \
	      FROM SECTION_ARCHIVE sa, CV_SECTION cvs,  CV_TABLE cvt \
	      WHERE {0} cvs.table_id = cvt.id \
	      AND sa.section_id = cvs.id

secSelectOuterJoin=SELECT cvs.id, \
                 cvt.name, \
                 cvs.name, \
                 sa.external_version, \
                 sa.id, \
                 sa.rowcount, \
                 sa.created, \
                 sa.deleted, \
                 sa.version_id, \
                 sa.data_checksum, \
                 sa.data_version \
	      FROM (SELECT * FROM SECTION_ARCHIVE WHERE DELETED IS NULL) sa, CV_SECTION cvs,  CV_TABLE cvt \
	      WHERE cvt.name = ? \
	      AND cvs.name = ? \
	      AND cvs.table_id = cvt.id \
	      AND sa.section_id (+) = cvs.id

setDeletedForSection=UPDATE SECTION_ARCHIVE \
	SET DELETED = ? \
	WHERE id = ?

secAlive= deleted is NULL AND

secWhereSection=cvt.name = ? AND cvs.name = ? AND {0}

secWhereTable=cvt.name = ? AND {0}

secWhereId=sa.id = ? AND

secWhereTableAndSection=cvt.name = ? AND cvs.name = ? AND

secOrderById= ORDER BY sa.id

secWhereSectionArchiveId=sa.id = ? AND

secRollbackDeleted=UPDATE SECTION_ARCHIVE \
	SET DELETED = NULL \
	WHERE DELETED = ? {0}

secRollbackCreated=DELETE SECTION_ARCHIVE \
	WHERE CREATED = ? {0}

secRollbackSectionIdWhere=AND section_id = ?

secRollbackTableIdWhere=AND section_id IN ( \
	SELECT cvs.id FROM  CV_SECTION cvs, CV_TABLE cvt WHERE cvt.name = ? AND cvs.table_id = cvt.id )

secCreatedDate=SELECT u.ended FROM section_archive a JOIN update_process u ON u.id=a.created WHERE a.id = ?

#############################################################

acSelect=SELECT daa.process_run_id, daa.read_as_deleted \
	      FROM SECTION_ACCESS_ARCHIVE daa \
	      LEFT JOIN UPDATE_PROCESS up ON daa.process_run_id = up.id \
	      WHERE up.ownerid = ? \
	      AND daa.section_archive_id = ?

acMarkPrevSectionsAsDeleted=UPDATE SECTION_ACCESS_ARCHIVE saa \
		SET saa.read_as_deleted = ? \
		WHERE saa.process_run_id in (SELECT id FROM UPDATE_PROCESS WHERE ownerid = ?) \
		AND saa.section_archive_id IN (SELECT id FROM SECTION_ARCHIVE WHERE section_id = ? ) \
		AND saa.read_as_deleted IS NULL \
		AND saa.section_archive_id != ?

acInsert=INSERT INTO SECTION_ACCESS_ARCHIVE (id, \
                                             section_archive_id, \
                                             process_run_id) \
		VALUES (SECTION_ACCESS_ARCHIVE_SEQ.NEXTVAL, ?, ?)

acMarkDeleted=UPDATE SECTION_ACCESS_ARCHIVE saa \
		SET saa.read_as_deleted = ? \
		WHERE saa.process_run_id IN (SELECT id FROM UPDATE_PROCESS WHERE ownerid = ? ) \
		AND saa.section_archive_id = ?


##########COMMENTED UNTIL ADMIN IS RUNNING##########

#We only want to update a row when the last run id is not the same as the run id
#which means that this process was not the first to see this particular version
#Also does not work over a single section
#rollbackLastRunDatasourceReadUpdate=UPDATE section_access_archive \
#  SET last_run_id =? \
#  WHERE last_run_id =? \
#  AND last_run_id <> process_run_id \
#  AND section_id in ( \
#  	SELECT s.id FROM cv_table t, cv_section s WHERE t.name =? and t.id = s.table_id \
#  )

#Specifies a rollback which only affects one section of a datasource
#rollbackLastRunSectionReadUpdate=UPDATE section_access_archive \
#  SET last_run_id =? \
#  WHERE last_run_id =? \
#  AND last_run_id <> process_run_id \
#  AND section_id =?

#same as update equivalent except this removes entires when it was the original
#process which was recorded
#rollbackLastRunDatasourceReadDelete=DELETE FROM section_access_archive \
#  WHERE last_run_id =? \
#  AND last_run_id = process_run_id \
#  AND section_id in ( \
#  	SELECT s.id FROM cv_table t, cv_section s WHERE t.name =? and t.id = s.table_id \
#  )

#Specifies a rollback which only affects one section of a datasource
#rollbackLastRunSectionReadDelete=DELETE FROM section_access_archive \
#  WHERE last_run_id =? \
#  AND last_run_id = process_run_id \
#  AND section_id =?

##########END OF BLOCK COMMENT##########

getSectionsByDatasourceAndProcessRunId=SELECT sa.section_id, saa.section_archive_id \
FROM section_access_archive saa, section_archive sa, ( \
	SELECT max(up.id) AS run_ID, cs.id AS section_id \
	FROM UPDATE_PROCESS up, section_access_archive sab, cv_table ct, cv_section cs, section_archive sa \
	WHERE ct.name =? \
	AND ct.id = cs.table_id \
	AND cs.id = sa.section_id \
	AND sa.id = sab.section_archive_id \
	AND up.ownerid = ? \
	AND sab.process_run_id = up.id \
	AND sab.read_as_deleted IS NULL \
	GROUP BY cs.id \
	) pid  \
WHERE sa.section_id = pid.section_id \
AND saa.section_archive_id = sa.id \
AND saa.process_run_id = pid.run_ID

getSectionByDatasourceSectionAndProcessRunId=SELECT sa.section_id, saa.section_archive_id \
FROM section_access_archive saa, section_archive sa, ( \
	SELECT max(up.id) AS run_ID, cs.id AS section_id \
	FROM UPDATE_PROCESS up, section_access_archive sab, cv_table ct, cv_section cs, section_archive sa \
	WHERE ct.name = ? \
	AND ct.id = cs.table_id \
	AND cs.name = ? \
	AND cs.id = sa.section_id \
	AND sa.id = sab.section_archive_id \
	AND up.ownerid = ? \
	AND sab.process_run_id = up.id \
	AND sab.read_as_deleted IS NULL \
	GROUP BY cs.id \
	) pid  \
WHERE sa.section_id = pid.section_id \
AND saa.section_archive_id = sa.id \
AND saa.process_run_id = pid.run_ID

getLastProcessRunId=select id from ( \
SELECT id, run FROM update_process WHERE ownerid =? AND run is not null ORDER BY run desc \
) \
where rownum = 1

#############################################################

lockInsert=INSERT INTO ACCESS_LOCK (LOCK_ID, UPDATE_PROCESS_OWNER_ID, section_id, type) \
		VALUES (?, ?, ?, ? )

# PROCESS_OWNER_ID ACCESS_LOCK
lockInsertSelect=INSERT INTO ACCESS_LOCK (LOCK_ID, UPDATE_PROCESS_OWNER_ID, section_id, type) \
		VALUES (?, ?, ( {0} ) , ?)

releaseLock=DELETE FROM ACCESS_LOCK \
		WHERE section_id IN ( {0} ) \
		AND LOCK_ID = ?

lockTrigger=create or replace \
TRIGGER apply_lock  \
BEFORE INSERT ON ACCESS_LOCK FOR EACH ROW   \
DECLARE   \
	CURSOR C1 IS \
			SELECT LOCK_ID, section_id, type \
			FROM ACCESS_LOCK \
			WHERE section_id = :new.section_id; \
      c1_rec C1%ROWTYPE;   \
BEGIN   \
	OPEN C1;  \
	IF :new.type = 'W' THEN  LOOP   \
		FETCH C1 INTO c1_rec;   \
		EXIT WHEN C1%NOTFOUND;  \
		RAISE_APPLICATION_ERROR ( num => -20000, msg => 'LOCKED');  \
	END LOOP;  \
 \
	ELSIF :new.type = 'R' THEN LOOP  \
		FETCH C1 INTO c1_rec;  \
		EXIT WHEN C1%NOTFOUND;  \
		IF c1_rec.type = 'W' THEN  \
  		CLOSE C1; \
			RAISE_APPLICATION_ERROR ( num => -20000, msg => 'LOCKED');  \
		ELSIF c1_rec.section_id = :new.section_id AND c1_rec.type = :new.type \
				AND c1_rec.LOCK_ID = :new.LOCK_ID THEN  \
			CLOSE C1; \
  		EXECUTE IMMEDIATE \
				'DELETE FROM access_lock WHERE section_id = :1 AND type =:2 AND lock_id = :3' \
  			USING :new.section_id, :new.type, :new.lock_id; \
			EXIT;  \
		END IF;  \
	END LOOP;  \
	 \
	END IF;  \
	IF c1%ISOPEN THEN \
		close c1;  \
	END IF;	\
END apply_lock;

#############################################################
#
#############################################################

