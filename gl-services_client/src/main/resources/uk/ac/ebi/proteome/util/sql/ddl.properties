#Generic DDL
analyseEntity='{'call analyse_{0}_entity(?,?)'}'

renameEntity=ALTER {0} {1} RENAME TO {2}

dropEntity=DROP {0} {1}

checkEntityExistence=SELECT COUNT(*) from {0} where {1} =?

grant=GRANT {0} on {1} to {2}

privileges=select GRANTEE, PRIVILEGE from USER_TAB_PRIVS where TABLE_NAME =?

#Table specific DDL
createTable=CREATE TABLE {0} ( {1} ) TABLESPACE {2}

createTableNoTablespace=CREATE TABLE {0} ( {1} )

createExternalTable=CREATE TABLE {0} ( {1} ) ORGANIZATION EXTERNAL ( \
		TYPE ORACLE_LOADER DEFAULT DIRECTORY {2} \
		ACCESS PARAMETERS ( \
		  RECORDS DELIMITED BY ''{4}''  \
		  READSIZE {9} \
		  LOGFILE ''{6}'' BADFILE ''{7}'' DISCARDFILE ''{8}'' \
		  FIELDS TERMINATED BY ''{5}'' missing field values are null \
		  ({10}) \
		  ) \
		LOCATION (''{3}'') \
		) \
	 REJECT LIMIT UNLIMITED

#PARALLEL REJECT LIMIT UNLIMITED

createExternalTableMultiple=CREATE TABLE {0} ( {1} ) ORGANIZATION EXTERNAL ( \
		TYPE ORACLE_LOADER DEFAULT DIRECTORY {2} \
		ACCESS PARAMETERS ( \
		  RECORDS DELIMITED BY ''{4}''  \
		  READSIZE {9} \
		  LOGFILE ''{6}'' BADFILE ''{7}'' DISCARDFILE ''{8}'' \
		  FIELDS TERMINATED BY ''{5}'' missing field values are null \
		  ({10}) \
		  ) \
		LOCATION ({3}) \
		) \
	 REJECT LIMIT UNLIMITED

#PARALLEL REJECT LIMIT UNLIMITED

alterTable=ALTER TABLE {0} {1}

truncateTable=TRUNCATE TABLE {0}

tableRowCount=SELECT COUNT(*) FROM {0}

createConstraint=ALTER TABLE {0} ADD CONSTRAINT {1} {2} ({3}) USING INDEX TABLESPACE {4}

createConstraintNoTableSpace=ALTER TABLE {0} ADD CONSTRAINT {1} {2} ({3})

modifyColumn=ALTER TABLE {0} MODIFY {1} {2}

dropConstraint=ALTER TABLE {0} DROP CONSTRAINT {1}

renameConstraint=ALTER TABLE {1} RENAME CONSTRAINT {1} TO {2}

columnNamesFromTable=SELECT COLUMN_NAME from USER_TAB_COLS where TABLE_NAME =?

indexesFromTable=SELECT INDEX_NAME, INDEX_TYPE \
from USER_INDEXES \
where TABLE_NAME =? \
and INDEX_NAME NOT LIKE 'SYS_%'

indexFieldsFromName=SELECT COLUMN_NAME, COLUMN_POSITION \
from USER_IND_COLUMNS \
where INDEX_NAME =? \
order by INDEX_NAME, COLUMN_POSITION

numberOfConstraintsByName=SELECT COUNT(*) from USER_CONSTRAINTS WHERE CONSTRAINT_NAME =?

tableNameFromConstraint=SELECT TABLE_NAME from USER_CONSTRAINTS where \
CONSTRAINT_NAME =?

constraintsFromTable=SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE \
from USER_CONSTRAINTS \
where TABLE_NAME =? and CONSTRAINT_NAME NOT LIKE 'SYS_%' and CONSTRAINT_TYPE <> 'R'

foreignConstraintsFromTable=SELECT CONSTRAINT_NAME, CONSTRAINT_TYPE \
from USER_CONSTRAINTS \
where TABLE_NAME =? and CONSTRAINT_NAME NOT LIKE 'SYS_%' and CONSTRAINT_TYPE = 'R'

constraintFieldsFromName=SELECT COLUMN_NAME, POSITION from USER_CONS_COLUMNS \
where CONSTRAINT_NAME=? \
order by COLUMN_NAME, POSITION

#Index specific DDL
createIndex=CREATE {0} INDEX {2} ON {1}({3}) TABLESPACE {4}
createIndexNoTablespace=CREATE {0} INDEX {2} ON {1}({3})

#Sequence specific DDL
sequenceNextVal=SELECT {0}.nextval from DUAL
sequenceLastReturned=select LAST_NUMBER from {0} where {1} =?

#Other DDL related queries
currentSchemaName=select sys_context('userenv','current_schema') as \
current_schema from dual

#New FK code
foreignKeyFinder=select uc1.constraint_name, uc1.table_name, ucc1.column_name, uc2.table_name, ucc2.column_name \
from user_constraints uc1, user_constraints uc2, user_cons_columns ucc1, user_cons_columns ucc2 \
where uc1.table_name =? \
and uc1.constraint_type = 'R' \
and uc1.r_constraint_name = uc2.constraint_name \
and uc1.constraint_name = ucc1.constraint_name \
and uc2.constraint_name = ucc2.constraint_name \

createForeignKey=alter table {0} \
add constraint {1} foreign key ({2}) references {3}
